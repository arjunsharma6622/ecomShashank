- Delete, DTOs | update

- Orders
- Payment Gateway
- Pagination, Filter, Search

- Redis

- AWS



- update category
- make create prod server loosely coupled
- create category mapper
- at all places use mapper, don't use .set...

- exception handling, in all the GET, PUT, DELETE calls, (where ever we are trying to get some data from database)
- there is a chance of that data not being present, so throw exception


id,
userId - entity,
list<product> - entity
total amount,
status

order - product (Many to Many)
new table


order - user (Many to one)
save userId in order

m : 1
1 : m
save lower into many side

m : m
new table with
o_p table


id, name, email, phone, gender





REST TEMPLATE - spring framework
it is a class










pagination

page - what page are you at?
limit - 20
sort by -
    - asc or desc





/products?page=1&limit=2&sortby=price


RAM - primary storage

key : val - RAM

server(cache) - redis (key : val pairs - "key:val")
- cache hit - if data found in cache
- cache miss - if data not found in cache
- eviction policy - 10 GB
    if 10 GB full, and trying to add new data
    - add new - remove old
    - reject incoming - X

client              server              DB (server)
            x                    2y          z
            x

2x+2y+z

redis stack server - jedisconnectionfactory
redis template

// serializer article
https://medium.com/@betul5634/redis-serialization-with-spring-redis-data-lettuce-codec-1a1d2bc73d26

// connection article
https://medium.com/turkcell/making-first-connection-to-redis-with-java-application-spring-boot-4fc58e6fa173